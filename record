#!/bin/sh
#
# A script to record the screen using ffmpeg, with support for recording audio
# from both the screen and a microphone, to record a specific part of the screen
# selected using slop, and even running screenkey to show what keys you're
# pressing.
#
# dmenu is used to pick the sinks used for sound.
#
# Depends on: ffmpeg, slop, screenkey, pulseaudio, dmenu

pidFile="$XDG_RUNTIME_DIR/record_script.pid"
outFile="/tmp/screen-recording.mkv"

frameRate=60
recordMicrophone=0
recordSound=0
runScreenkey=0
runSlop=0

if [ -e "$pidFile" ]; then
	kill -s INT "$(cat "$pidFile")" > /dev/null
	killall screenkey 2>/dev/null
	rm "$pidFile"
	notify-send -u low "stopped recording" "Process killed."
	exit 0
fi

while [ "$#" -gt 0 ]; do
	case "$1" in
		-s|--sound|--record-sound)
			recordSound=1
			frameRate=30
			shift
			;;
		-m|--microphone|--record-microphone)
			recordMicrophone=1
			frameRate=30
			shift
			;;
		-f|--framerate|--target-framerate)
			frameRate="$2"
			shift 2
			;;
		-l|--slop|--run-slop)
			runSlop=1
			shift
			;;
		-k|--screenkey|--keys|--run-screenkey)
			runScreenkey=1
			shift
			;;
		*)
			outFile="$1"
			shift
			;;
	esac
done

ffmpegArguments="-framerate $frameRate -hwaccel vaapi -thread_queue_size 4096"
ffmpegArguments="$ffmpegArguments -f x11grab"

if [ "$runSlop" -eq 1 ]; then
	read -r X Y W H << EOF
$(slop -f "%x %y %w %h")
EOF
	if [ $((W % 2)) -ne 0 ]; then
		W=$((W + 1))
	fi
	ffmpegArguments="$ffmpegArguments -s ${W}x$H -i $DISPLAY.0+$X,$Y"
else
	ffmpegArguments="$ffmpegArguments -s $(xrandr | grep -F '*' \
		| awk '{print $1}') -i $DISPLAY.0"
fi

if [ "$recordSound" -eq 1 ]; then
	pulseSource="$(pactl list short sources | awk '{print $1 " " $2}' \
		| dmenu -l 10 -p 'Sound:' | awk '{print $1}')"
	ffmpegArguments="$ffmpegArguments -thread_queue_size 4096 -f pulse"
	ffmpegArguments="$ffmpegArguments -i $pulseSource"
fi

if [ "$recordMicrophone" -eq 1 ]; then
	pulseSource="$(pactl list short sources | awk '{print $1 " " $2}' \
		| dmenu -l 10 -p 'Microphone:' | awk '{print $1}')"
	ffmpegArguments="$ffmpegArguments -thread_queue_size 4096 -f pulse"
	ffmpegArguments="$ffmpegArguments -i $pulseSource"
fi

if [ "$recordSound" -eq 1 ] || [ "$recordMicrophone" -eq 1 ]; then
	ffmpegArguments="$ffmpegArguments -acodec libfdk_aac -b:a 128k"
	if [ "$recordSound" -eq 1 ] && [ "$recordMicrophone" -eq 1 ]; then
		ffmpegArguments="$ffmpegArguments -filter_complex amix"
	fi
fi

ffmpegArguments="$ffmpegArguments -vcodec libx264 -crf 0 -pix_fmt yuv420p"
ffmpegArguments="$ffmpegArguments -preset ultrafast"

notify-send -u low "started recording" "Don't do anything suspicious!"

if [ "$runSlop" -eq 1 ] && [ "$runScreenkey" -eq 1 ]; then
	screenkey -t 2 -s small -g "${W}x${H}+${X}+${Y}" &
elif [ "$runScreenkey" -eq 1 ]; then
	screenkey -t 2 -s small &
fi

echo "$$" > "$pidFile"
exec ffmpeg -y $ffmpegArguments "$outFile"
