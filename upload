#!/bin/bash
#
# Upload a file given as a first argument or, in its absence, passed through
# stdin. This script uses associative arrays, a Bash feature that resembles
# hashmaps or Python dictionaries. Since arrays and associative arrays are not
# part of POSIX sh, this Bashism is sadly unavoidable here unless I choose to
# write inelegant POSIX sh code or use a different language.
#
# The environment variables UPLOAD_HOST_PREFERENCE and UPLOAD_HOST_REGISTRY will
# be used for the file host preference (priority) list and for the list of
# available file hosts, respectively, if set. Otherwise, some defaults are
# provided herein.
#
# Depends on: bash, curl, patience

declare -A host_registry
declare -a host_preference

[[ -v UPLOAD_HOST_PREFERENCE ]] \
  && host_preference=("${UPLOAD_HOST_PREFERENCE[@]}") \
  || host_preference=(0x0st uguu teknik)

if [[ -v UPLOAD_HOST_REGISTRY ]]; then
  for host_name in "${!UPLOAD_HOST_REGISTRY[@]}"; do
    host_registry["$host_name"]="${UPLOAD_HOST_REGISTRY[$host_name]}"
  done
else
  host_registry=(
    [url_uguu]="https://uguu.se/api.php?d=upload-tool"
    [url_0x0st]="http://0x0.st"
    [url_teknik]="https://api.teknik.io/v1/Upload"
    [field_uguu]="file"
    [field_0x0st]="file"
    [field_teknik]="file"
  )
fi

file_name="${1:-$(< /dev/stdin)}"
[[ -r "$file_name" ]] || exit 1

for host in "${host_preference[@]}"; do
  host_response=$(curl -s -F "${host_registry[field_$host]}=@$file_name" \
    "${host_registry[url_$host]}")
  if [[ $? -eq 0 && -n "$host_response" ]]; then
    echo "$host_response"
    exit
  fi
done
